var db = require('../config/connection')
var collection = require('../config/collections')
var bcrypt = require('bcrypt')
var objectId = require('mongodb').ObjectId
module.exports = {


    adminLogin: (adminData) => {
        let loginStatus = false
        let response = {}
        return new Promise(async (resolve, reject) => {
            let admin = await db.get().collection(collection.ADMIN_COLLECTION).findOne({ email: adminData.email })
            if (admin) {
                bcrypt.compare(adminData.password, admin.password).then((status) => {
                    if (status) {
                        console.log("login success");
                        response.admin = admin
                        response.status = true
                        resolve(response)
                    } else {
                        console.log("login failed");
                        resolve({ status: false })
                    }
                })
            } else {
                console.log("login failed 2");
                resolve(response)
            }
        })
    },
    adminSignup: (adminData) => {
        return new Promise(async (resolve, reject) => {
            const salt = await bcrypt.genSalt(10)
            adminData.password = await bcrypt.hash(adminData.password, salt)

            let admin = await db.get().collection(collection.ADMIN_COLLECTION).findOne({ email: adminData.email })
            if (admin) {
                resolve({ status: false })
            } else {
                // db.get().collection(collection.USER_COLLECTION).insertOne(userData).then((data) => {
                // resolve(data)
                db.get().collection(collection.ADMIN_COLLECTION).insertOne(adminData)
                resolve({ status: true })
                console.log(adminData);
            }
        })
    },

    addProduct: (product, callback) => {

        db.get().collection('product').insertOne(product).then((data) => {
            callback(data.insertedId)
        })
    },
    getAllProducts: () => {
        return new Promise(async (resolve, reject) => {
            let products = await db.get().collection(collection.PRODUCT_COLLECTION).find().toArray()
            resolve(products)
        })
    },
    deleteProduct: (proId) => {
        return new Promise((resolve, reject) => {
            console.log(objectId(proId));
            db.get().collection(collection.PRODUCT_COLLECTION).deleteOne({ _id: objectId(proId) }).then((response) => {
                resolve(response)
            })
        })
    },
    editProduct: (proId) => {
        return new Promise((resolve, reject) => {
            db.get().collection(collection.PRODUCT_COLLECTION).findOne({ _id: objectId(proId) }).then((product) => {
                resolve(product)
            })

        })
    },
    updateProduct: (proId, proDetails) => {
        return new Promise((resolve, reject) => {
            db.get().collection(collection.PRODUCT_COLLECTION).updateOne({ _id: objectId(proId) }, {
                $set: {
                    name: proDetails.name,
                    category: proDetails.category,
                    price: proDetails.price,
                    description: proDetails.description
                }
            }).then((response) => {
                resolve(response)
            })

        })
    },

    getOrderPage: () => {
        return new Promise(async (resolve, reject) => {
            let orders = await db.get().collection(collection.ORDER_COLLECTION).find().toArray()
            resolve(orders);
        })
    }




}